{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pacu\\\\Desktop\\\\f\\\\ElderCare\\\\reactfront\\\\src\\\\components\\\\Monitor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport '../CSS/planhouse.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 30;\nconst numCols = 30;\nfunction Monitor() {\n  _s();\n  const {\n    name,\n    sirname,\n    address\n  } = useParams();\n  const sessionData = sessionStorage.getItem(\"UserSession\");\n  const [gridData, setGridData] = useState({});\n  const [grid, setGrid] = useState(() => {\n    return Array.from({\n      length: numRows\n    }, () => Array.from({\n      length: numCols\n    }, () => 0));\n  });\n  useEffect(() => {\n    var userId = JSON.parse(sessionData);\n    const fetchHousePlan = async () => {\n      try {\n        const response = await fetch(`/api/monitor?name=${encodeURIComponent(name)}&sirname=${encodeURIComponent(sirname)}&address=${encodeURIComponent(address)}&userId=${encodeURIComponent(userId['user_id'])}`);\n        const data = await response.json();\n        setGridData(data.housePlan);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchHousePlan();\n  }, []);\n  useEffect(() => {\n    if (gridData.length != undefined) {\n      setGrid(gridData[gridData.length - 1].grid);\n    }\n  }, [gridData]);\n  useEffect(() => {\n    console.debug(grid);\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Monitoring \", name, \" \", sirname]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Address: \", address]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid-cell${cell ? ' cell-filled' : ''}`,\n          style: cell ? {\n            backgroundColor: cell\n          } : {} // Apply the paintColor as inline style\n        }, cellIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(Monitor, \"LSxlcpDS/ZtqC+d9Pz8sMsUOQ6c=\", false, function () {\n  return [useParams];\n});\n_c = Monitor;\nexport default Monitor;\nvar _c;\n$RefreshReg$(_c, \"Monitor\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","numRows","numCols","Monitor","_s","name","sirname","address","sessionData","sessionStorage","getItem","gridData","setGridData","grid","setGrid","Array","from","length","userId","JSON","parse","fetchHousePlan","response","fetch","encodeURIComponent","data","json","housePlan","error","console","undefined","debug","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","row","rowIndex","cell","cellIndex","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/Pacu/Desktop/f/ElderCare/reactfront/src/components/Monitor.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../CSS/planhouse.css';\r\n\r\nconst numRows = 30;\r\nconst numCols = 30;\r\n\r\n\r\nfunction Monitor() {\r\n  const { name, sirname, address } = useParams();\r\n  const sessionData = sessionStorage.getItem(\"UserSession\");\r\n  const [gridData, setGridData] = useState({})\r\n  const [grid, setGrid] = useState(() => {\r\n    return Array.from({ length: numRows }, () => Array.from({ length: numCols }, () => 0));\r\n  });\r\n\r\nuseEffect(() => {\r\n    var userId = JSON.parse(sessionData)\r\n\r\n    const fetchHousePlan = async () => {\r\n      try{\r\n        const response = await  fetch(`/api/monitor?name=${encodeURIComponent(name)}&sirname=${encodeURIComponent(sirname)}&address=${encodeURIComponent(address)}&userId=${encodeURIComponent(userId['user_id'])}`);\r\n        const data = await response.json();\r\n        setGridData(data.housePlan);\r\n      }\r\n      catch (error){\r\n        console.error(error);\r\n      }\r\n    };\r\n    fetchHousePlan();\r\n}, []);\r\nuseEffect(() => {\r\n    if(gridData.length != undefined)\r\n    {\r\n        setGrid(gridData[gridData.length-1].grid);\r\n    }\r\n\r\n}, [gridData]);\r\nuseEffect(() => {\r\n    console.debug(grid);\r\n\r\n}, [grid]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Monitoring {name} {sirname}</h1>\r\n      <h2>Address: {address}</h2>\r\n      <div className=\"grid\">\r\n        {grid.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"grid-row\">\r\n            {row.map((cell, cellIndex) => (\r\n              <div\r\n                key={cellIndex}\r\n                className={`grid-cell${cell ? ' cell-filled' : ''}`}\r\n                style={cell ? { backgroundColor: cell } : {}} // Apply the paintColor as inline style\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Monitor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}